// <auto-generated />

namespace PC.Logger.Internal
{
    using System.Reflection;
    using System.Resources;
	using JetBrains.Annotations;

    /// <summary>
    ///     This API supports the infrastructure and is not intended to be used
    ///     directly from your code. This API may change or be removed in future releases.
    /// </summary>
    internal static class CoreStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("PC.LoggerProperties.CoreStrings", typeof(CoreStrings).GetTypeInfo().Assembly);
        /// <summary>
        ///     The current cache mode configuration is not valid. Valid values: 'None', 'InMemory', 'Redis'.
        /// </summary>
        public static string AppSettingsCurrentCacheModeNotValid
            => GetString("AppSettingsCurrentCacheModeNotValid");
        /// <summary>
        ///     The configuration key 'DefaultConnectionStringKey' or the configuration section 'SqlServer' was not found.
        /// </summary>
        public static string AppSettingsDefaultSqlServerConnStrKeyNotFound
            => GetString("AppSettingsDefaultSqlServerConnStrKeyNotFound");
        /// <summary>
        ///     The current cache mode is set to 'Redis', but no Redis Cache Configuration was found.
        /// </summary>
        public static string AppSettingsRedisConfigurationNotFound
            => GetString("AppSettingsRedisConfigurationNotFound");
        /// <summary>
        ///     Invalid 'SqlDbContext' registration: SQL database contexts should never be registered as singleton instances. Source registration type: '{dbContextTypeName}'.
        /// </summary>
        public static string DbContextCannotBeRegisteredAsSingleton([CanBeNull] object dbContextTypeName)
            => string.Format(
                GetString("DbContextCannotBeRegisteredAsSingleton", nameof(dbContextTypeName)),
                dbContextTypeName);
        /// <summary>
        ///     The requested connection provider '{providerName}' was not found. Are you missing a connection provider registration?
        /// </summary>
        public static string DbFactoryConnectionProviderNotFound([CanBeNull] object providerName)
            => string.Format(
                GetString("DbFactoryConnectionProviderNotFound", nameof(providerName)),
                providerName);
        /// <summary>
        ///     The 'ConnectionString' property for the current connection factory is null or empty. You must explicitly define a connection string during the registration step for the given connection factory.
        /// </summary>
        public static string DbFactoryConnectionStringNotDefined
            => GetString("DbFactoryConnectionStringNotDefined");
        /// <summary>
        ///     The 'SqlDbConfig.GlobalConnectionProvider' static property is null. You must explicitly set it before using the current connection factory, or explicitly define a connection provider during the registration step for the given connection factory.
        /// </summary>
        public static string DbFactoryGlobalDbConnectionProviderNotDefined
            => GetString("DbFactoryGlobalDbConnectionProviderNotDefined");
        /// <summary>
        ///     The requested named connection '{namedConnection}' was not found. Are you missing a named connection registration?
        /// </summary>
        public static string DbFactoryNamedConnectionNotFound([CanBeNull] object namedConnection)
            => string.Format(
                GetString("DbFactoryNamedConnectionNotFound", nameof(namedConnection)),
                namedConnection);
        /// <summary>
        ///     To enable user secrets for this application, ensure that the specified assembly is referencing the NuGet package 'Microsoft.Extensions.Configuration.UserSecrets' and that the '&lt;UserSecretsId&gt;' project property is correctly defined.
        /// </summary>
        public static string HowToEnableUserSecrets
            => GetString("HowToEnableUserSecrets");
        /// <summary>
        ///     The value provided for argument '{argumentName}' must be a valid value of enum type '{enumType}'.
        /// </summary>
        public static string InvalidEnumValue([CanBeNull] object argumentName, [CanBeNull] object enumType)
            => string.Format(
                GetString("InvalidEnumValue", nameof(argumentName), nameof(enumType)),
                argumentName, enumType);
        /// <summary>
        ///     ------- Local User Secrets ----------
        /// </summary>
        public static string LabelLocalUserSecrets
            => GetString("LabelLocalUserSecrets");
        /// <summary>
        ///     Is User Secrets Enabled?
        /// </summary>
        public static string LabelLocalUserSecretsEnabled
            => GetString("LabelLocalUserSecretsEnabled");
        /// <summary>
        ///     ------- Multi-Tenancy Options -------
        /// </summary>
        public static string LabelMultiTenancyOptions
            => GetString("LabelMultiTenancyOptions");
        /// <summary>
        ///     Current Cache Mode:
        /// </summary>
        public static string LabelMultiTenancyOptionsCurrentCacheMode
            => GetString("LabelMultiTenancyOptionsCurrentCacheMode");
        /// <summary>
        ///     Default SQL Server ConnStr Key:
        /// </summary>
        public static string LabelMultiTenancyOptionsDefaultSqlServerConnStrKey
            => GetString("LabelMultiTenancyOptionsDefaultSqlServerConnStrKey");
        /// <summary>
        ///     Default SQL Server ConnStr Value:
        /// </summary>
        public static string LabelMultiTenancyOptionsDefaultSqlServerConnStrValue
            => GetString("LabelMultiTenancyOptionsDefaultSqlServerConnStrValue");
        /// <summary>
        ///     ------- Redis Cache Options ---------
        /// </summary>
        public static string LabelRedisCacheOptions
            => GetString("LabelRedisCacheOptions");
        /// <summary>
        ///     Configuration:
        /// </summary>
        public static string LabelRedisCacheOptionsConfiguration
            => GetString("LabelRedisCacheOptionsConfiguration");
        /// <summary>
        ///     InstanceName:
        /// </summary>
        public static string LabelRedisCacheOptionsInstanceName
            => GetString("LabelRedisCacheOptionsInstanceName");
        /// <summary>
        ///     (n/a)
        /// </summary>
        public static string NotAvailable
            => GetString("NotAvailable");
        /// <summary>
        ///     The specified redirect location is not valid. Location: '{redirectLocation}'.
        /// </summary>
        public static string TenantUnresolvedInvalidRedirectLocation([CanBeNull] object redirectLocation)
            => string.Format(
                GetString("TenantUnresolvedInvalidRedirectLocation", nameof(redirectLocation)),
                redirectLocation);
        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
